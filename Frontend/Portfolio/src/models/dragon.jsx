/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: LasquetiSpice (https://sketchfab.com/LasquetiSpice)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/animated-dragon-three-motion-loops-eca98cf6cd084c1596cecf716e110c29
Title: Animated Dragon Three Motion Loops
*/

import { a } from '@react-spring/three';
import { useAnimations, useGLTF } from '@react-three/drei';
import { useFrame, useThree } from '@react-three/fiber';
import * as THREE from 'three';
// import { Bloom, EffectComposer } from '@react-three/postprocessing';
import React, { useEffect, useRef } from 'react';
import DragonModel from '../assets/demon_dragon_full_texture.glb';


function Dragon({isRotating, setIsRotating, isZoomedIn, setIsZoomedIn, ...props}) {
    const DragonRef = useRef()
    const { gl, viewport, camera } = useThree();
    const {nodes, materials, animations } = useGLTF(DragonModel);
    const { actions } = useAnimations(animations, DragonRef);
    let positionRef = useRef(0);
    let sinI = 0
    
    useEffect(() => {
    actions['flying_skeletal.3'].play();
    }, []);

  // Define an elliptical curve
  const curve = new THREE.CatmullRomCurve3([
    new THREE.Vector3(-5, -3, -4),  // Start point (near the dock)
    new THREE.Vector3(20, 10, -50),  // Fly out far right, beyond the island
    new THREE.Vector3(30, 5, -100),  // Far out, beyond the island
    new THREE.Vector3(10, 20, -70),  // High point, start return
    new THREE.Vector3(-20, 15, -60), // Fly back from left side, far out
    new THREE.Vector3(-30, 0, -30),  // Close in, left side of the island
    new THREE.Vector3(-5, -3, -4)   // End point, back near the dock
  ], false);
    useFrame(({clock, camera}) => {
    
      // DragonRef.current.position.y = Math.sin(clock.elapsedTime) * 0.2 - 2 + sinI;

      positionRef.current += 0.0001;
      if (positionRef.current > 1) {
        positionRef.current = 0; // Loop the animation if needed
      }

      // Get the position on the curve at the current positionRef
      const position = curve.getPointAt(positionRef.current);

      // Set dragon's position based on the curve
      DragonRef.current.position.set(position.x, position.y + Math.sin(clock.elapsedTime) * 0.2, position.z);

      // Optional: Orient the dragon to face the direction of the curve
      const tangent = curve.getTangentAt(positionRef.current);
      DragonRef.current.lookAt(
        position.x + tangent.x,
        position.y + tangent.y,
        position.z + tangent.z
      );
    });

//     setInterval(() => {
//     console.log(`Dragon's Position: x=${DragonRef.current.position.x}, y=${DragonRef.current.position.y}, z=${DragonRef.current.position.z}`);
//     console.log(`Dragon's Rotation: x=${DragonRef.current.rotation.x}, y=${DragonRef.current.rotation.y}, z=${DragonRef.current.rotation.z}`);
// }, 1000);

  return (
    <>
    <a.group ref={DragonRef} {...props}>
    <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]} scale={3.829}>
          <group name="root">
            <group name="GLTF_SceneRootNode" rotation={[Math.PI / 2, 0, 0]}>
              <group name="RootNode0_222" scale={0.01}>
                <group name="skeletal3_221">
                  <group name="GLTF_created_0">
                    <primitive object={nodes.GLTF_created_0_rootJoint} />
                    <skinnedMesh
                      name="Object_8"
                      geometry={nodes.Object_8.geometry}
                      material={materials.Material_0}
                      skeleton={nodes.Object_8.skeleton}
                    />
                    <skinnedMesh
                      name="Object_9"
                      geometry={nodes.Object_9.geometry}
                      material={materials.Material_0}
                      skeleton={nodes.Object_9.skeleton}
                    />
                    <skinnedMesh
                      name="Object_10"
                      geometry={nodes.Object_10.geometry}
                      material={materials.Material_0}
                      skeleton={nodes.Object_10.skeleton}
                    />
                    <group name="dragon_wings22_220" />
                  </group>
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </a.group>
    {/* <EffectComposer>
          <Bloom
            intensity={1.5} // Control the intensity of the bloom
            luminanceThreshold={0.1} // Control which parts should glow based on brightness
            luminanceSmoothing={0.1} // Smooth transition for bright parts
            height={200} // Control the resolution of the bloom
          />
      </EffectComposer> */}
    </>
    )
}

export default Dragon;
