/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: kaede256 (https://sketchfab.com/kaede256)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/planet-earth-bce3ea48781c4f02a8c52d2678220d07
Title: Planet Earth
*/

import { a, animated, easings, useSpring } from '@react-spring/three';
import { useAnimations, useGLTF } from '@react-three/drei';
import { useFrame, useThree } from '@react-three/fiber';
// import { Bloom, EffectComposer } from '@react-three/postprocessing';
import React, { useEffect, useRef, useState } from 'react';
import * as THREE from 'three';
import EarthModel from "../assets/planet_earth.glb";

function Earth({ isRotating, setIsRotating,currentStage,
      transitioning, setTransitioning, ...props }) {
  const EarthRef = useRef();
  const { gl, viewport } = useThree();
  const { nodes, materials, animations } = useGLTF(EarthModel);
  const { actions } = useAnimations(animations, EarthRef);
  const [targetRotation, setTargetRotation] = useState([0, -3, 0]);
  const [targetPosition, setTargetPosition] = useState([0, -3, -50]);

  const lastX = useRef(0);
  const lastY = useRef(0);
  const RspeedX = useRef(0); // Speed for X rotation
  const RspeedY = useRef(0); // Speed for Y rotation
  const dampingFactor = 0.95;
  const defaultRotationSpeed = 0.05

  const { rotation } = useSpring({
    rotation: targetRotation,
    config: { mass: 1, tension: 280, friction: 40 }, // Smooth transition
  });
  const { position } = useSpring({
    position: targetPosition,
    config: { mass: 1, tension: 280, friction: 40, duration: 800, easing: easings.easeOutQuad}, // Smooth transition
  });

  const handlePointerDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);
    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    const clientY = e.touches ? e.touches[0].clientY : e.clientY;
    lastX.current = clientX;
    lastY.current = clientY;
  };

  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  };

  const handlePointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();
    if (isRotating) {
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;
      const clientY = e.touches ? e.touches[0].clientY : e.clientY;

      const deltaX = (clientX - lastX.current) / viewport.width;
      const deltaY = (clientY - lastY.current) / viewport.height;

      setTargetRotation([
        EarthRef.current.rotation.x + deltaY * 0.4, // X-axis (up-down)
        EarthRef.current.rotation.y + deltaX * 0.4, // Y-axis (left-right)
        0,
      ]);


      lastX.current = clientX;
      lastY.current = clientY;

      // Store rotation speeds
      RspeedX.current = deltaX * 0.1;
      RspeedY.current = deltaY * 0.1;
    }
  };

  useFrame(() => {
    if (!isRotating) {
      // Gradually reduce speed (damping)
      RspeedX.current *= dampingFactor;
      RspeedY.current *= dampingFactor;

      setTargetRotation([
        EarthRef.current.rotation.x + RspeedY.current, // Keep any remaining momentum from Y-axis drag
        EarthRef.current.rotation.y + defaultRotationSpeed + RspeedX.current, // Constant rotation + X-axis momentum
        0,
      ]);
    }
  });

//   useEffect(() => {
//     setTimeout(() => {
//     console.log(`Earth's Position: x=${EarthRef.current.position.x}, y=${EarthRef.current.position.y}, z=${EarthRef.current.position.z}`);
//     console.log(`Earth's Rotation: x=${EarthRef.current.rotation.x}, y=${EarthRef.current.rotation.y}, z=${EarthRef.current.rotation.z}`);
// }, 1000)});

  useEffect(() => {
    const canvas = gl.domElement;
    canvas.addEventListener('pointerdown', handlePointerDown);
    canvas.addEventListener('pointerup', handlePointerUp);
    canvas.addEventListener('pointermove', handlePointerMove);
    return () => {
      canvas.removeEventListener('pointerdown', handlePointerDown);
      canvas.removeEventListener('pointerup', handlePointerUp);
      canvas.removeEventListener('pointermove', handlePointerMove);
    };
  }, [gl, handlePointerDown, handlePointerMove, handlePointerUp]);

  // Create a glow material for the additional mesh
  const createGlowMaterial = (emissiveColor = "#007dff", intensity = 2) => {
    return new THREE.MeshStandardMaterial({
      color: new THREE.Color(emissiveColor),
      emissive: new THREE.Color(emissiveColor),
      emissiveIntensity: intensity,
      transparent: false,
      opacity: 1,    // Adjust glow opacity for subtlety
      blending: THREE.NormalBlending,  // Additive blending to enhance glow effect
      side: THREE.BackSide,  // Render inside out to ensure glow is visible
    });
  };
  // nodes.materials = glowMaterial;

  return (
    <>
    <a.group ref={EarthRef} {...props} rotation={rotation} position={position}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group
            name="578a67fb859c4432ad395a9d408af1e7fbx"
            rotation={[Math.PI / 2, 0, 0]}
            scale={0.01}>
            <group name="Object_2">
              <group name="RootNode">
                <group name="Earth" rotation={[-Math.PI / 2, 0, 0.681]} scale={358.622}>
                  <animated.mesh
                    name="Earth_Ice_0"
                    geometry={nodes.Earth_Ice_0.geometry}
                    material={materials.material}
                  />
                  <animated.mesh
                    name="Earth_Water_0"
                    geometry={nodes.Earth_Water_0.geometry}
                    material={materials.Water}
                  />
                  <animated.mesh
                    name="Earth_Sand_0"
                    geometry={nodes.Earth_Sand_0.geometry}
                    material={materials.Sand}
                  />
                  <animated.mesh
                    name="Earth_Grass_0"
                    geometry={nodes.Earth_Grass_0.geometry}
                    material={materials.Grass}
                  />
                  <group
                    name="Earth_Details"
                    position={[0.163, -0.812, 0.592]}
                    rotation={[-0.525, -0.789, -2.962]}
                    scale={[0.006, 0.006, 0.009]}>
                    <animated.mesh
                      name="Earth_Details_Wood_0"
                      geometry={nodes.Earth_Details_Wood_0.geometry}
                      material={materials.Wood}
                    />
                    <animated.mesh
                      name="Earth_Details_Tree_0"
                      geometry={nodes.Earth_Details_Tree_0.geometry}
                      material={materials.Tree}
                    />
                    <animated.mesh
                      name="Earth_Details_Tree_0_1"
                      geometry={nodes.Earth_Details_Tree_0_1.geometry}
                      material={materials.Tree}
                    />
                    <animated.mesh
                      name="Earth_Details_Ice_0"
                      geometry={nodes.Earth_Details_Ice_0.geometry}
                      material={materials.material}
                    />
                    <animated.mesh
                      name="Earth_Details_Blue_0"
                      geometry={nodes.Earth_Details_Blue_0.geometry}
                      material={materials.Blue}
                    />
                    <animated.mesh
                      name="Earth_Details_Sand_0"
                      geometry={nodes.Earth_Details_Sand_0.geometry}
                      material={materials.Sand}
                    />
                    <animated.mesh
                      name="Earth_Details_red_0"
                      geometry={nodes.Earth_Details_red_0.geometry}
                      material={materials.material_7}
                    />
                  </group>
                  <group
                    name="Clouds_and_Stars"
                    position={[-0.577, -0.085, 0.844]}
                    rotation={[-1.555, -0.135, 2.627]}
                    scale={0.042}>
                    <animated.mesh
                      name="Clouds_and_Stars_Ice_0"
                      geometry={nodes.Clouds_and_Stars_Ice_0.geometry}
                      material={materials.material}
                    />
                    <animated.mesh
                      name="Clouds_and_Stars_Star_0"
                      geometry={nodes.Clouds_and_Stars_Star_0.geometry}
                      material={materials.Star}
                    />
                  </group>
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </a.group>
    {/* <EffectComposer>
        <Bloom
          intensity={1.5} // Control the intensity of the bloom
          luminanceThreshold={0.1} // Control which parts should glow based on brightness
          luminanceSmoothing={0.3} // Smooth transition for bright parts
          height={150} // Control the resolution of the bloom
        />
    </EffectComposer> */}
    </>
  )
}

// useGLTF.preload('/planet_earth.glb')
export default Earth;
